<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Socket.io</title>
        <style>
        	body, html { 
        		width: 100%; height: 100%; padding: 0px; margin: 0px; 
        	}
        	#debug {
        		background: black;
        		color: white;
        		position: absolute;
        		width: calc(100%-20px);
        		font-size: 12px;
        		font-family: sans-serif;
        		top: 0;
        		left: 0;
        		padding: 20px;
        		line-height: 0px;
        		opacity: 0.5;
        	}
        </style>
    </head>
    <body>
        <script src="static/js/socket.io.js"></script>
        <script src="static/js/three.min.js"></script>
        <script src="static/js/jquery-2.1.1.min.js"></script>
        <div id="webgl" style="width: 100%; height: 100%;"></div>
        <div id="debug"></div>
        <script>

	    	// Network variables
		    var players = {};	
		    var clientId = null;	// socket/client id

	    	// Set up the scene
	    	var t = 0;			
		    var dt = 0.001;
		    var moving = false;		
		    var angle = -Math.PI/2; // direction of movement
	        var socket = io('http://localhost:4000');
		    var scene = new THREE.Scene();
		    var width = $("#webgl").width();
		    var height = $("#webgl").height();
		    var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
		    camera.position.z = 30;
		    camera.position.y = 10;
		    var renderer = new THREE.WebGLRenderer();
		    renderer.setClearColor( 0x202020, 1 );
		    renderer.setSize( width, height );
		    document.getElementById("webgl").appendChild( renderer.domElement );
		    var playerGeometry = new THREE.SphereGeometry(2.0, 64, 64);
		    var material = new THREE.MeshBasicMaterial({
	            color: Math.random() * 0xffffff 
	        });	
		    var fg = new THREE.PlaneGeometry(1280, 1280, 64, 64); 
		    var fm = new THREE.MeshBasicMaterial({
	            color: 0x2F0fff,
	            wireframe: true
	        });
		    var floor = new THREE.Mesh(fg, fm);
		    scene.add(floor);
		    floor.rotation.x = -Math.PI/2;
		    floor.position.y -= 0.5;
			// Starfield just for the heck of it	
		    var starField = new THREE.Geometry();
			for (var i = 0; i < 1000; i++) {
				starField.vertices.push(new THREE.Vector3(
					(Math.random()-Math.random())*400, 
					Math.random()*100, 
					(Math.random()-Math.random())*400));
			}
			scene.add(new THREE.Points(starField, new THREE.PointsMaterial( { color: 0xffff88, size: 0.4 } )))
			
	        // Render the scene 
		    function render() {
		        requestAnimationFrame( render );
		        renderer.render( scene, camera );     
		        if (clientId == null) return;
		        t += dt;
		        // Player movement
		        if (moving) {
			    	var x = ( mouseX / window.innerWidth ) * 2 - 1;
					var y = - ( mouseY / window.innerHeight ) * 2 + 1;
					angle += x * 0.1;
					players[clientId].mesh.position.x += Math.cos(angle);
			        camera.position.x = players[clientId].mesh.position.x - 30*Math.cos(angle);
			        players[clientId].mesh.position.z += Math.sin(angle);
			        camera.position.z = players[clientId].mesh.position.z - 30*Math.sin(angle);
			        camera.rotation.y = Math.PI + Math.atan2(Math.cos(angle), Math.sin(angle));
			        players[clientId].mesh.rotation.y = camera.rotation.y;
		        }
	       		// Update the player's position to server
		        socket.emit('update', { 
			    	player: {
			    		id: clientId, 
			    		color: players[clientId].mesh.material.color.getHex(),
			    		connected: 1,
			    		x: players[clientId].mesh.position.x, 
			    		y: players[clientId].mesh.position.y,
			    		z: players[clientId].mesh.position.z
			    	}
			    });

		    }

		    // Mouse events
		    $("body").mouseup(function(e) {
		    	moving = false;	
		    });
		    $("body").mousedown(function(e) {
		    	moving = true;
		    });
		    $("body").mousemove(function(e) {
		    	mouseX = e.clientX;
		    	mouseY = e.clientY;
		    });

		    // Network initialization
			socket.emit('init');

			// Listen for init data
			socket.on('init', function(data) {
				clientId = data.id;
				var mat = material.clone();
				mat.color.setHex(data.color); 
				var mesh = new THREE.Mesh(
					playerGeometry, 
					mat
				);
				mesh.position.x = data.x;
				mesh.position.y = data.y;
				mesh.position.z = data.z;
			    players[clientId] = { id: data.id, mesh: mesh };
		    	scene.add(mesh);
			});

			// Listen for player updates
	        socket.on('update', function(data) {
	        	$("#debug").html("");
	        	var keys = Object.keys(data.players);
	        	var ps = keys.map(function(key) {
	        		return data.players[key]
	        	});
	        	keys.forEach(function(key) {
	        		var player = data.players[key];
	        		$("#debug").append("<p>id=" + player.id + ", x=" + 
	        			player.x.toFixed(2) + ", y=" + 
	        			player.y.toFixed(2) + ", z=" + 
	        			player.z.toFixed(2) + ", conn=" +
	        			player.connected +  ", color=" +
	        			'0x' + player.color.toString(16) + "</p>"
	        		);
	        		if (!(player.id in players)) { // add player to scene
	        			var mat = material.clone();
	        			mat.color.setHex(player.color);
	        			var mesh = new THREE.Mesh(playerGeometry, mat);
					    players[player.id] = { id: player.id, mesh: mesh };
				    	scene.add(mesh);
	        		}
	        		if (!player.connected) { // remove player from scene
	        			if (players[player.id].mesh != null) {
	        				scene.remove(players[player.id].mesh);
	        				players[player.id].mesh = null;
	        			}
	        			return;
	        		}
	        		if (player.id == clientId) return;
	        		players[player.id].mesh.position.x = player.x;
	        		players[player.id].mesh.position.y = player.y;
	        		players[player.id].mesh.position.z = player.z;
	        	});
	        });

		 	// Let's go
		    render();
		    
        </script>
    </body>
</html>